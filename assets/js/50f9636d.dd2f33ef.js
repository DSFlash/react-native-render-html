(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4149],{8690:function(e,n,t){"use strict";t.d(n,{Z:function(){return o}});var r=t(2784),a=t(6785),i=t(77);function o(e){var n=e.name,t=e.member,o=e.full,s=void 0!==o&&o,l=t?"#"+t.toLowerCase():"";return r.createElement(a.Z,{url:(0,i.Z)("/api/"+n.toLowerCase()+l),name:t&&n&&s?n+"."+t:t||n,full:s,type:"api-def"})}},9350:function(e,n,t){"use strict";t.d(n,{Z:function(){return i}});var r=t(2784),a=t(8928);function i(e){var n=e.className;return r.createElement(a.Z,{className:n,name:"React Native Blog",projectUrl:"https://expo.io/@jsamr/react-native-blog",imagePath:"/img/blog-expo-qr.png"})}},6115:function(e,n,t){"use strict";t.d(n,{Z:function(){return m}});var r=t(2784),a="device-iphone-x_3RRi",i="device-frame_iHOx",o="device-content_2DVK",s="device-header_1Vm7",l="device-sensors_3zFL",c="device-btns_Wi9z",d="device-power_a6Po";function m(e){var n=e.children,t=e.scale,m=void 0===t?1:t,p=e.style;return r.createElement("div",{style:Object.assign({"--scale-factor":m},p),className:a},r.createElement("div",{className:i},r.cloneElement(n,Object.assign({},n.props,{className:o}))),r.createElement("div",{className:s}),r.createElement("div",{className:l}),r.createElement("div",{className:c}),r.createElement("div",{className:d}))}},798:function(e,n,t){"use strict";t.d(n,{Z:function(){return o}});var r=t(2784),a=t(6115),i=t(77);function o(e){var n=e.scale,t=e.url,o=e.style;return r.createElement("div",{style:o},r.createElement(a.Z,{scale:n},r.createElement("img",{src:(0,i.Z)(t)})))}},8928:function(e,n,t){"use strict";t.d(n,{Z:function(){return m}});var r=t(2784),a=t(6277),i="expoBox_kc_g",o="expoBox__logo_3yMr",s="expoBox__qr_3YAa",l="img_17FI",c=t(77),d=function(e){var n=e.size;return r.createElement("svg",{width:"24",height:"26",viewBox:"0 0 24 26",style:{width:n,height:n},fill:"none",xmlns:"http://www.w3.org/2000/svg"},r.createElement("path",{d:"M22.069 10.075a2.273 2.273 0 00-.887-.74 2.296 2.296 0 00-2.237.16 2.265 2.265 0 00-.77.859 2.016 2.016 0 00.392 2.274 3.342 3.342 0 002.23-.63 3.289 3.289 0 001.271-1.923zM15.3 1.3l-1.45-.788-6.31 3.481.503.27.957.498 1.732-.954 4.569-2.523-.001.016zm.584-.24a.225.225 0 01.16.15l2.114 6.182a.205.205 0 01-.1.269 4.063 4.063 0 00-1.798 1.974 4.017 4.017 0 00-.175 2.655 4.283 4.283 0 001.755 2.332c.842.55 1.852.79 2.854.68a.269.269 0 01.262.16l2.184 6.345a.256.256 0 01-.101.278l-6.712 3.89a.253.253 0 01-.101.02.27.27 0 01-.181-.03L13.69 24.5a.234.234 0 01-.1-.1l-4.6-10.483-7.005 3.95a.327.327 0 01-.272.01l-1.592-.898a.23.23 0 01-.1-.299l6.805-12.8a.243.243 0 01.11-.099L13.721.03a.259.259 0 01.241 0l1.923 1.03zM7.47 4.499L7.14 4.33.58 16.71l1.197.668 5.657-7.335a.275.275 0 01.231-.1.282.282 0 01.201.149l6.16 14.066 1.646 1.007L9.06 6.005l-.281-.798-1.318-.718.01.01zm10.145 7.382a2.51 2.51 0 01.12-1.663 2.54 2.54 0 011.138-1.23 2.798 2.798 0 013.261.4 2.513 2.513 0 01.073 3.568l-.073.073a2.77 2.77 0 01-3.788.01 2.719 2.719 0 01-.731-1.158z",fill:"var(--ifm-font-color-base)"}))};function m(e){var n=e.className,t=e.projectUrl,m=e.name,p=e.imagePath,h=(0,c.Z)(p);return r.createElement("div",{className:(0,a.Z)(i,n)},r.createElement("div",{className:o},r.createElement(d,{size:48})),r.createElement("a",{target:"_blank",rel:"noopener",href:t},r.createElement("strong",null,"Try Out The ",m," App on Expo!")),r.createElement("div",{className:s},r.createElement("img",{className:l,alt:"QR code to scan the "+m+" App in Expo Go",src:h})))}},5869:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return d},contentTitle:function(){return m},metadata:function(){return p},toc:function(){return h},default:function(){return g}});var r=t(7560),a=t(8283),i=(t(2784),t(9037)),o=t(798),s=t(8690),l=t(9350),c=["components"],d={title:"Create A WebView-free Blog App with React Native Render HTML, Part II",author:"Jules Sam. Randolph",author_title:"Developer of React Native Render HTML v6",author_url:"https://github.com/jsamr/",author_image_url:"https://avatars.githubusercontent.com/u/3646758?v=4",tags:["foundry","Blog","Article"],description:"A step-by-step guide to render a Blog Article with table of content and scroll-to-section feature in React Native.",image:"img/article-create-webviewfree-blog-app.png",hide_table_of_contents:!1},m=void 0,p={permalink:"/react-native-render-html/blog/2021/06/28/create-blog-app-rnrh-II",source:"@site/blog/2021-06-28-create-blog-app-rnrh-II.mdx",title:"Create A WebView-free Blog App with React Native Render HTML, Part II",description:"A step-by-step guide to render a Blog Article with table of content and scroll-to-section feature in React Native.",date:"2021-06-28T00:00:00.000Z",formattedDate:"June 28, 2021",tags:[{label:"foundry",permalink:"/react-native-render-html/blog/tags/foundry"},{label:"Blog",permalink:"/react-native-render-html/blog/tags/blog"},{label:"Article",permalink:"/react-native-render-html/blog/tags/article"}],readingTime:13,truncated:!0,prevItem:{title:"Create A WebView-free Blog App with React Native Render HTML, Part III",permalink:"/react-native-render-html/blog/2021/06/29/create-blog-app-rnrh-III"},nextItem:{title:"Create A WebView-free Blog App with React Native Render HTML, Part I",permalink:"/react-native-render-html/blog/2021/06/27/create-blog-app-rnrh-I"}},h=[{value:"The Home Screen",id:"the-home-screen",children:[{value:"The <code>useRssFeed</code> Hook",id:"the-userssfeed-hook",children:[]},{value:"The <code>FeedItemDisplay</code> Component",id:"the-feeditemdisplay-component",children:[]},{value:"The List Component",id:"the-list-component",children:[]}]},{value:"The Article Screen",id:"the-article-screen",children:[{value:"Setting up the Composite Rendering Architecture",id:"setting-up-the-composite-rendering-architecture",children:[]},{value:"Rendering the Article",id:"rendering-the-article",children:[]},{value:"The Drawer Layout",id:"the-drawer-layout",children:[]},{value:"Extracting headings",id:"extracting-headings",children:[]},{value:"The <code>TOC</code> Component",id:"the-toc-component",children:[]}]}],u={toc:h};function g(e){var n=e.components,t=(0,a.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This article is the part II of the ",(0,i.kt)("em",{parentName:"p"},"Create a  WebView-free Blog App with React Native Render HTML")," serie.\nSee also ",(0,i.kt)("a",{parentName:"p",href:"/react-native-render-html/blog/2021/06/27/create-blog-app-rnrh-I"},"Part I")," and ",(0,i.kt)("a",{parentName:"p",href:"/react-native-render-html/blog/2021/06/29/create-blog-app-rnrh-III"},"Part III"),"."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The source code of this case study is available in the ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," branch of this\nrepo: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jsamr/rnrh-blog"},(0,i.kt)("inlineCode",{parentName:"a"},"jsamr/rnrh-blog")),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"enhanced"),"\nbranch contains a few more features beyond this tutorial, such as a refined UI,\ndark mode, caching with ",(0,i.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/"},"react-queries"),"...\netc. You can try out the ",(0,i.kt)("strong",{parentName:"p"},"enhanced")," version right now with expo, see ",(0,i.kt)("a",{parentName:"p",href:"https://expo.io/@jsamr/react-native-blog"},"the\nproject page")," for instructions."))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you have any question or remarks regarding this tutorial, ",(0,i.kt)("a",{parentName:"p",href:"https://discord.gg/dbEMMJM"},"you're welcome in our Discord channel"),"."))),(0,i.kt)(l.Z,{mdxType:"ExpoBlogCard"}),(0,i.kt)("h2",{id:"the-home-screen"},"The Home Screen"),(0,i.kt)("p",null,"Let's get back to our ",(0,i.kt)("inlineCode",{parentName:"p"},"HomeScreen.tsx")," file. Below are the steps to get to a functional component:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Fetch the RSS feed items. We'll do this in the ",(0,i.kt)("inlineCode",{parentName:"li"},"useRssFeed")," hook."),(0,i.kt)("li",{parentName:"ol"},"Render a ",(0,i.kt)("inlineCode",{parentName:"li"},"FlatList")," filled with the fetched items."),(0,i.kt)("li",{parentName:"ol"},"Render individual items in a ",(0,i.kt)("inlineCode",{parentName:"li"},"FeedItemDisplay")," component.")),(0,i.kt)("h3",{id:"the-userssfeed-hook"},"The ",(0,i.kt)("inlineCode",{parentName:"h3"},"useRssFeed")," Hook"),(0,i.kt)("p",null,"First of all, we'll define the ",(0,i.kt)("inlineCode",{parentName:"p"},"FeedItem")," TypeScript interface in\n",(0,i.kt)("inlineCode",{parentName:"p"},"shared-types.ts"),". This is the shape of items parsed by the RSS parser."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="shared-types.ts"',title:'"shared-types.ts"'},"// ... previous exports\n\nexport interface FeedItem {\n  title: string;\n  links: [{ url: string }];\n  description: string;\n  published: string;\n}\n")),(0,i.kt)("p",null,"Then, let's define the hook in the ",(0,i.kt)("inlineCode",{parentName:"p"},"hooks/useRssFeed.ts")," file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="hooks/useRssFeed.ts"',title:'"hooks/useRssFeed.ts"'},"import { useState, useEffect, useCallback } from 'react';\nimport * as rssParser from 'react-native-rss-parser';\nimport { FeedItem } from '../shared-types';\n\nexport default function useRssFeed(feed: string) {\n  const [{ isRefreshing, refreshId, items }, setRssState] = useState({\n    items: null as null | FeedItem[],\n    isRefreshing: true,\n    refreshId: 0\n  });\n  const refresh = useCallback(() => {\n    setRssState((s) => ({\n      ...s,\n      isRefreshing: true,\n      refreshId: s.refreshId + 1\n    }));\n  }, []);\n  useEffect(\n    function loadFeed() {\n      let cancelled = false;\n      (async function () {\n        const response = await fetch(feed);\n        if (response.ok) {\n          const data = await response.text();\n          const feed = await rssParser.parse(data);\n          !cancelled &&\n            setRssState((s) => ({\n              ...s,\n              items: (feed.items as unknown) as FeedItem[],\n              isRefreshing: false\n            }));\n        } else {\n          !cancelled &&\n            setRssState((s) => ({\n              ...s,\n              isRefreshing: false\n            }));\n        }\n      })();\n      return () => {\n        cancelled = true;\n      };\n    },\n    [refreshId, feed]\n  );\n  return { refresh, isRefreshing, items };\n}\n")),(0,i.kt)("p",null,"This hook uses an effect to load the feed, and store the retrieved items in a\nlocal state (",(0,i.kt)("inlineCode",{parentName:"p"},"items"),"). A few remarks:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"We provide a ",(0,i.kt)("inlineCode",{parentName:"li"},"refresh")," function to trigger a new fetch along with a ",(0,i.kt)("inlineCode",{parentName:"li"},"isRefreshing"),"\nstate."),(0,i.kt)("li",{parentName:"ol"},"The effect callback returns a cleanup function to avoid setting state on\nunmounted components. Not doing this is considered an antipattern, see ",(0,i.kt)("a",{parentName:"li",href:"https://dev.to/pallymore/clean-up-async-requests-in-useeffect-hooks-90h"},"this\nguide")," for a deep dive.")),(0,i.kt)("p",null,"Last but not least, if you are using TypeScript, you will need to add module\ndefinitions for rss-parser. Put this file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"hooks")," folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="hooks/react-native-rss-parser.d.ts"',title:'"hooks/react-native-rss-parser.d.ts"'},"declare module 'react-native-rss-parser';\n")),(0,i.kt)("h3",{id:"the-feeditemdisplay-component"},"The ",(0,i.kt)("inlineCode",{parentName:"h3"},"FeedItemDisplay")," Component"),(0,i.kt)("p",null,"We are going to define this component in the ",(0,i.kt)("inlineCode",{parentName:"p"},"components")," directory, like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/FeedItemDisplay.tsx"',title:'"components/FeedItemDisplay.tsx"'},"import { NavigationProp, useNavigation } from '@react-navigation/native';\nimport React, { useCallback } from 'react';\nimport { Card, Text } from 'react-native-paper';\nimport { FeedItem, RootStackParamList } from '../shared-types';\n\nexport default function FeedItemDisplay({ item }: { item: FeedItem }) {\n  const date = new Date(Date.parse(item.published));\n  const navigation = useNavigation<NavigationProp<RootStackParamList>>();\n  const url = item.links[0].url;\n  const onPress = useCallback(() => {\n    navigation.navigate('Article', { url: url, title: item.title });\n  }, [url]);\n  return (\n    <Card\n      style={{\n        marginHorizontal: 10,\n        paddingRight: 10\n      }}\n      onPress={onPress}>\n      <Card.Title\n        titleNumberOfLines={2}\n        title={item.title}\n        titleStyle={{ lineHeight: 26 }}\n        subtitle={date.toLocaleDateString()}\n      />\n      <Card.Content>\n        <Text numberOfLines={3}>{item.description}</Text>\n      </Card.Content>\n    </Card>\n  );\n}\n")),(0,i.kt)("p",null,"This component barely displays a ",(0,i.kt)("inlineCode",{parentName:"p"},"FeedItem")," in a ",(0,i.kt)("inlineCode",{parentName:"p"},"Card")," component from\n",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-paper"),'. Besides, it allows navigation to the "Article" route when\npressed.'),(0,i.kt)("h3",{id:"the-list-component"},"The List Component"),(0,i.kt)("p",null,"Since we have the data consumable with a hook, and individual items, let's\nrewrite the default export of ",(0,i.kt)("inlineCode",{parentName:"p"},"screens/HomeScreen.tsx"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport { FlatList, ListRenderItem, View } from 'react-native';\n// ... other imports\nimport FeedItemDisplay from '../components/FeedItemDisplay';\nimport useRssFeed from '../hooks/useRssFeed';\n\nfunction Separator() {\n  return <View style={{ height: 10 }} />;\n}\n\nconst renderItem: ListRenderItem<FeedItem> = function renderItem({ item }) {\n  return <FeedItemDisplay item={item} />;\n};\n\nexport default function HomeScreen() {\n  const { items, refresh, isRefreshing } = useRssFeed(\n    'https://reactnative.dev/blog/rss.xml'\n  );\n  return (\n    <SafeAreaView style={{ flexGrow: 1 }}>\n      <FlatList\n        onRefresh={refresh}\n        refreshing={isRefreshing}\n        data={items}\n        renderItem={renderItem}\n        ListFooterComponent={Separator}\n        ItemSeparatorComponent={Separator}\n        ListHeaderComponent={Separator}\n      />\n    </SafeAreaView>\n  );\n}\n")),(0,i.kt)(o.Z,{style:{float:"right",marginLeft:10},url:"/img/blog-article-home.png",scale:.5,mdxType:"Screenshot"}),(0,i.kt)("p",null,"Great! Thus you should be able to see the list on your app. Press a card and\nyou'll see an empty Article screen showing up. Note that we are using a\n",(0,i.kt)("inlineCode",{parentName:"p"},"Separator")," component for consistent spacing above, below and between items."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you are unfamiliar with the ",(0,i.kt)("inlineCode",{parentName:"p"},"FlatList")," component, ",(0,i.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/using-a-listview"},"check out the official guide"),"."))),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You can drag-to-refresh the list to fetch the RSS feed again. This is thanks to\n",(0,i.kt)("inlineCode",{parentName:"p"},"onRefresh")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"refreshing")," props of the ",(0,i.kt)("inlineCode",{parentName:"p"},"FlatList")," component."))),(0,i.kt)("p",null,"Now it's time to refine the Article screen!"),(0,i.kt)("div",{style:{clear:"right"}}),(0,i.kt)("h2",{id:"the-article-screen"},"The Article Screen"),(0,i.kt)("p",null,"To render the article, we'll need to follow the below steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Fetch the HTML from the given URL;"),(0,i.kt)("li",{parentName:"ol"},"Parse the HTML to build a DOM;"),(0,i.kt)("li",{parentName:"ol"},"Extract headings from the DOM;"),(0,i.kt)("li",{parentName:"ol"},"Render the headings in a Drawer and the DOM in a ",(0,i.kt)("inlineCode",{parentName:"li"},"ScrollView")," with ",(0,i.kt)(s.Z,{name:"RenderHTMLSource",mdxType:"APIReference"}),".")),(0,i.kt)("p",null,"One important note is that we must use the ",(0,i.kt)("a",{parentName:"p",href:"/react-native-render-html/docs/flow/rendering#composite-rendering-architecture"},"explicit composite rendering\narchitecture"),"\nbecause we want access to the DOM object from the controlling component to\neasily extract headings, which is more tedious when using the\nimplicit composite architecture (e.g., with the ",(0,i.kt)(s.Z,{name:"RenderHTML",mdxType:"APIReference"})," component)."),(0,i.kt)("h3",{id:"setting-up-the-composite-rendering-architecture"},"Setting up the Composite Rendering Architecture"),(0,i.kt)("p",null,"Explicit composite rendering implies that we will replace ",(0,i.kt)(s.Z,{name:"RenderHTML",mdxType:"APIReference"})," with ",(0,i.kt)(s.Z,{name:"RenderHTMLSource",mdxType:"APIReference"}),", which will have two ascendants in the render tree: a ",(0,i.kt)(s.Z,{name:"TRenderEngineProvider",mdxType:"APIReference"}),"\nand a ",(0,i.kt)(s.Z,{name:"RenderHTMLConfigProvider",mdxType:"APIReference"}),". Those\nparents will respectively share an engine instance and configuration with any\n","\u200b",(0,i.kt)(s.Z,{name:"RenderHTMLSource",mdxType:"APIReference"})," descendant."),(0,i.kt)("p",null,"A good place to put those providers is the very root of the application. For that end, we will\ncreate a ",(0,i.kt)("inlineCode",{parentName:"p"},"components/WebEngine.tsx")," and load it from ",(0,i.kt)("inlineCode",{parentName:"p"},"App.tsx"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/WebEngine.tsx"',title:'"components/WebEngine.tsx"'},"import * as React from 'react';\nimport {\n  RenderHTMLConfigProvider,\n  TRenderEngineProvider,\n  TRenderEngineConfig,\n} from 'react-native-render-html';\nimport { findOne } from 'domutils';\n\nconst selectDomRoot: TRenderEngineConfig[\"selectDomRoot\"] = (node) =>\n  findOne((e) => e.name === \"article\", node.children, true);\n\nconst ignoredDomTags = [\"button\"];\n\nexport default function WebEngine({ children }: React.PropsWithChildren<{}>) {\n  // Every prop is defined outside of the function component.\n  // This is important to prevent extraneous rebuilts of the engine.\n  return (\n    <TRenderEngineProvider\n      ignoredDomTags={ignoredDomTags}\n      selectDomRoot={selectDomRoot}>\n      <RenderHTMLConfigProvider enableExperimentalMarginCollapsing>\n        {children}\n      </RenderHTMLConfigProvider>\n    </TRenderEngineProvider>\n  );\n}\n")),(0,i.kt)("p",null,"A few remarks on different props used here:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(s.Z,{name:"TRenderEngineConfig",member:"ignoreDomTags",full:!0,mdxType:"APIReference"})," prop to ignore irrelevant tags;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(s.Z,{name:"TRenderEngineConfig",member:"selectDomRoot",full:!0,mdxType:"APIReference"})," prop to select the first DOM element to render;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(s.Z,{name:"RenderHTMLConfig",member:"enableExperimentalMarginCollapsing",full:!0,mdxType:"APIReference"})," prop to collapse vertical margins.")),(0,i.kt)("p",null,"We will go back to this component later to refine the appearance. For the time\nbeing, we'll focus on features.\nA final step is to import the ",(0,i.kt)("inlineCode",{parentName:"p"},"WebEngine")," from the root component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'{2,8,28} title="App.tsx"',"{2,8,28}":!0,title:'"App.tsx"'},"// ... other imports\nimport WebEngine from './components/WebEngine';\n\nconst Stack = createStackNavigator<RootStackParamList>();\n\nexport default function App() {\n  return (\n    <WebEngine>\n      <SafeAreaProvider>\n        <NavigationContainer>\n          <Stack.Navigator\n            screenOptions={{\n              headerShown: false\n            }}>\n            <Stack.Screen\n              name=\"Home\"\n              options={{ title: 'Blog' }}\n              component={HomeScreen}\n            />\n            <Stack.Screen\n              name=\"Article\"\n              options={{ headerShown: true }}\n              component={ArticleScreen}\n            />\n          </Stack.Navigator>\n        </NavigationContainer>\n      </SafeAreaProvider>\n    </WebEngine>\n  );\n}\n")),(0,i.kt)("h3",{id:"rendering-the-article"},"Rendering the Article"),(0,i.kt)("h4",{id:"the-articlebody-component"},"The ",(0,i.kt)("inlineCode",{parentName:"h4"},"ArticleBody")," Component"),(0,i.kt)("p",null,"Let's implement an ",(0,i.kt)("inlineCode",{parentName:"p"},"ArticleBody")," component which sole purpose is to display\nthe rendered DOM when it's ready, and a loading indicator when it's not:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/ArticleBody.tsx"',title:'"components/ArticleBody.tsx"'},'import React from \'react\';\nimport { StyleSheet, View } from \'react-native\';\nimport { useWindowDimensions } from \'react-native\';\nimport { ScrollView } from \'react-native-gesture-handler\';\nimport { RenderHTMLSource, Document } from \'react-native-render-html\';\nimport { ActivityIndicator } from \'react-native-paper\';\n\nfunction LoadingDisplay() {\n  return (\n    <View style={styles.loading}>\n      <ActivityIndicator color="#61dafb" size="large" />\n    </View>\n  );\n}\n\nconst HZ_MARGIN = 10;\n\nexport default function ArticleBody({ dom }: { dom: Document | null }) {\n  const { width } = useWindowDimensions();\n  const availableWidth = Math.min(width, 500);\n  return (\n    <ScrollView\n      style={styles.container}\n      contentContainerStyle={[\n        styles.content,\n        { width: availableWidth }\n      ]}>\n      {dom ? (\n        <RenderHTMLSource\n          contentWidth={availableWidth - 2 * HZ_MARGIN}\n          source={{\n            dom\n          }}\n        />\n      ) : (\n        <LoadingDisplay />\n      )}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexGrow: 1,\n  },\n  content: {\n    flexGrow: 1,\n    alignSelf: "center",\n    paddingHorizontal: HZ_MARGIN,\n    // leave some space for the FAB\n    paddingBottom: 65\n  },\n  loading: {\n    flexGrow: 1,\n    justifyContent: "center",\n    alignItems: "center",\n  },\n  loading: {\n    flexGrow: 1,\n    justifyContent: "center",\n    alignItems: "center",\n  },\n});\n')),(0,i.kt)("p",null,"Note that the ",(0,i.kt)(s.Z,{name:"RenderHTMLSourceProps",member:"source",full:!0,mdxType:"APIReference"}),"\nprop can take a ",(0,i.kt)("inlineCode",{parentName:"p"},"dom"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"uri")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"html")," field. Just as a reminder, we need to\nuse the ",(0,i.kt)("inlineCode",{parentName:"p"},"dom")," source variant because we will have to query\nheadings displayed in a Drawer menu."),(0,i.kt)("h4",{id:"back-to-the-articlescreen"},"Back to the ",(0,i.kt)("inlineCode",{parentName:"h4"},"ArticleScreen")),(0,i.kt)("p",null,"We need to produce a ",(0,i.kt)("inlineCode",{parentName:"p"},"dom")," object to feed the ",(0,i.kt)("inlineCode",{parentName:"p"},"ArticleBody")," component we have\njust defined. We propose two hooks to produce this object:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"useFetchHtml(url: string)")," to fetch the HTML;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"useArticleDom(url: string)")," to create a DOM.")),(0,i.kt)("p",null,"Add this new file in ",(0,i.kt)("inlineCode",{parentName:"p"},"hooks/useArticleDom.ts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="hooks/useArticleDom.ts"',title:'"hooks/useArticleDom.ts"'},"import { useEffect, useState, useMemo } from 'react';\nimport { useAmbientTRenderEngine } from 'react-native-render-html';\n\nfunction useFetchHtml(url: string) {\n  const [fetechState, setState] = useState({\n    html: null as string | null,\n    error: null as string | null\n  });\n  useEffect(\n    function fetchArticle() {\n      let cancelled = false;\n      (async function () {\n        const response = await fetch(url);\n        if (response.ok) {\n          const html = await response.text();\n          !cancelled && setState({ html, error: null });\n        } else {\n          !cancelled &&\n            setState({\n              html: null,\n              error: `Could not load HTML. Received status ${response.status}`\n            });\n        }\n      })();\n      return () => {\n        cancelled = true;\n      };\n    },\n    [url]\n  );\n  return fetechState;\n}\n\nexport default function useArticleDom(url: string) {\n  const engine = useAmbientTRenderEngine();\n  const { html } = useFetchHtml(url);\n  const dom = useMemo(() => {\n    if (typeof html === 'string') {\n      return engine.parseDocument(html);\n    }\n    return null;\n  }, [html, engine]);\n  return {\n    dom\n  };\n}\n")),(0,i.kt)("p",null,"The important stuff is happening in the ",(0,i.kt)("inlineCode",{parentName:"p"},"useArticleDom")," hook. We're using\n","\u200b",(0,i.kt)(s.Z,{name:"useAmbientTRenderEngine",mdxType:"APIReference"})," hook to get the\ninstance of the Transient Render Engine provided by ",(0,i.kt)(s.Z,{name:"TRenderEngineProvider",mdxType:"APIReference"}),",\nwhich in turns offers the ",(0,i.kt)(s.Z,{name:"TRenderEngine",member:"parseDocument",mdxType:"APIReference"})," method to\ntransform an HTML string into a DOM. Moreover, note that because we passed ",(0,i.kt)(s.Z,{name:"TRenderEngineConfig",member:"selectDomRoot",mdxType:"APIReference"}),"\nprop to select the first ",(0,i.kt)("inlineCode",{parentName:"p"},"<article>")," met, the returned ",(0,i.kt)("inlineCode",{parentName:"p"},"dom")," object will be an\n",(0,i.kt)("inlineCode",{parentName:"p"},"<article>")," element. Everything else such as ",(0,i.kt)("inlineCode",{parentName:"p"},"<header>"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<footer>")," and other\nelements will be ignored."),(0,i.kt)("p",null,"Finally, let's consume this hook from the ",(0,i.kt)("inlineCode",{parentName:"p"},"ArticleScreen")," component and render an ",(0,i.kt)("inlineCode",{parentName:"p"},"ArticleBody"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="screens/ArticleScreen"',title:'"screens/ArticleScreen"'},"// ... other imports\nimport ArticleBody from '../components/ArticleBody';\nimport useArticleDom from '../hooks/useArticleDom';\n\n// ... other definitions\n\nexport default function ArticleScreen(props: ArticleScreenProps) {\n  useSetTitleEffect(props);\n  const { dom } = useArticleDom(props.route.params.url);\n  return <ArticleBody dom={dom} />;\n}\n")),(0,i.kt)("p",null,"Fantastic! It's now rendering the whole article. ",(0,i.kt)("strong",{parentName:"p"},"It's very ugly though, and\nsignificantly divergent from the webpage layout, but we'll address that later"),":"),(0,i.kt)(o.Z,{scale:.85,url:"/img/blog-article-body-unstyled.png",mdxType:"Screenshot"}),(0,i.kt)("h3",{id:"the-drawer-layout"},"The Drawer Layout"),(0,i.kt)("p",null,"We want to display a menu on the right. For this purpose, we will use the\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-gesture-handler/docs/api/components/drawer-layout/"},(0,i.kt)("inlineCode",{parentName:"a"},"DrawerLayout")),"\ncomponent from ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-gesture-handler"),"."),(0,i.kt)("p",null,"Let's include this component in the ",(0,i.kt)("inlineCode",{parentName:"p"},"ArticleScreen")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="screens/ArticleScreen"',title:'"screens/ArticleScreen"'},"import React, { useCallback, useEffect, useRef } from 'react';\n// ... other imports\nimport { StyleSheet } from 'react-native';\nimport { DrawerLayout } from 'react-native-gesture-handler';\nimport { FAB } from 'react-native-paper';\n\n// ... other definitions\n\nfunction useDrawer() {\n  const drawerRef = useRef<DrawerLayout>(null);\n  const openDrawer = useCallback(() => {\n    drawerRef.current?.openDrawer();\n  }, []);\n  const closeDrawer = useCallback(() => {\n    drawerRef.current?.closeDrawer();\n  }, []);\n  return {\n    drawerRef,\n    openDrawer,\n    closeDrawer\n  };\n}\n\nexport default function ArticleScreen(props: ArticleScreenProps) {\n  useSetTitleEffect(props);\n  const { dom } = useArticleDom(props.route.params.url);\n  const { drawerRef, openDrawer } = useDrawer();\n  const renderToc = useCallback(function renderSceneContent() {\n    return null;\n  }, []);\n  return (\n    <DrawerLayout\n      drawerPosition=\"right\"\n      drawerWidth={300}\n      renderNavigationView={renderToc}\n      ref={drawerRef}>\n      <ArticleBody dom={dom} />\n      <FAB\n        style={styles.fab}\n        color=\"#61dafb\"\n        icon=\"format-list-bulleted-square\"\n        onPress={openDrawer}\n      />\n    </DrawerLayout>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fab: {\n    position: 'absolute',\n    bottom: 15,\n    right: 15,\n    backgroundColor: 'white'\n  }\n});\n")),(0,i.kt)("h3",{id:"extracting-headings"},"Extracting headings"),(0,i.kt)("p",null,"Now, let's get back to ",(0,i.kt)("inlineCode",{parentName:"p"},"useArticleDom")," hook and use an effect to extract headings from the DOM:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{1,3-4,10,18-33,36} title="hooks/useArticleDom.ts"',"{1,3-4,10,18-33,36}":!0,title:'"hooks/useArticleDom.ts"'},"import { useEffect, useState, useMemo } from 'react';\n// ... other imports\nimport { findAll } from 'domutils';\nimport { Element } from 'domhandler';\n\n// useFetchHtml\n\nexport default function useArticleDom(url: string) {\n  const engine = useAmbientTRenderEngine();\n  const [headings, setHeadings] = useState<Element[]>([]);\n  const { html } = useFetchHtml(url);\n  const dom = useMemo(() => {\n    if (typeof html === 'string') {\n      return engine.parseDocument(html);\n    }\n    return null;\n  }, [html, engine]);\n  useEffect(\n    function extractHeadings() {\n      if (dom != null) {\n        // We know the DOM hierarchy is going to be document \u2192 body \u2192 article\n        // because the engine will always ensure that a root document\n        // and a body are present. This process is called normalization.\n        const article = (dom.children[0] as Element)?.children[0] as Element;\n        const headers = findAll(\n          (elm) => elm.tagName === 'h2' || elm.tagName === 'h3',\n          article.children\n        );\n        setHeadings(headers);\n      }\n    },\n    [dom]\n  );\n  return {\n    dom,\n    headings\n  };\n}\n")),(0,i.kt)("p",null,"The effect is pretty straightforwards. It uses ",(0,i.kt)("inlineCode",{parentName:"p"},"findAll")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"domutils")," to\nextract all ",(0,i.kt)("inlineCode",{parentName:"p"},"h2")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"h3")," tags, and finally update the ",(0,i.kt)("inlineCode",{parentName:"p"},"headings")," state.\nWe are now ready to define a new ",(0,i.kt)("inlineCode",{parentName:"p"},"TOC")," component to render those headings in the drawer."),(0,i.kt)("h3",{id:"the-toc-component"},"The ",(0,i.kt)("inlineCode",{parentName:"h3"},"TOC")," Component"),(0,i.kt)("p",null,"Let's start by defining a ",(0,i.kt)("inlineCode",{parentName:"p"},"TOCEntry")," component in ",(0,i.kt)("inlineCode",{parentName:"p"},"components/TOCEntry.tsx"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/TOCEntry.tsx"',title:'"components/TOCEntry.tsx"'},"import React from 'react';\nimport { Pressable, StyleSheet, Text } from 'react-native';\n\nexport default function TOCEntry({\n  headerName,\n  tagName,\n  active,\n  onPress\n}: {\n  headerName: string;\n  tagName: string;\n  active: boolean;\n  onPress: () => void;\n}) {\n  return (\n    <Pressable\n      style={[styles.container, active && styles['container--active']]}\n      onPress={onPress}\n      android_ripple={{ color: '#baebf3' }}>\n      <Text\n        style={[\n          styles.label,\n          styles[`label--${tagName as 'h2' | 'h3'}` as const]\n        ]}>\n        {headerName}\n      </Text>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginBottom: 10,\n    paddingRight: 20,\n    marginLeft: 10,\n    borderRadius: 10,\n    paddingVertical: 10\n  },\n  'container--active': {\n    backgroundColor: \"rgba(186, 235, 243, 0.5)\"\n  },\n  label: {\n    textAlign: 'right',\n    fontSize: 14,\n    color: 'rgb(28, 30, 33)'\n  },\n  'label--h2': {\n    fontSize: 18\n  },\n  'label--h3': {}\n});\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"TOCEntry")," renders a ",(0,i.kt)("inlineCode",{parentName:"p"},"Pressable")," which label is styled depending of the\n",(0,i.kt)("inlineCode",{parentName:"p"},"tagName")," (h2 or h3) and whether it's active (e.g. selected).\nNow we're ready to define the ",(0,i.kt)("inlineCode",{parentName:"p"},"TOC")," component in ",(0,i.kt)("inlineCode",{parentName:"p"},"components/TOC.tsx"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/TOC.tsx"',title:'"components/TOC.tsx"'},"import React, { useState } from 'react';\nimport { ScrollView, StyleSheet, View } from 'react-native';\nimport { textContent } from 'domutils';\nimport { Element } from 'domhandler';\nimport TOCEntry from './TOCEntry';\n\nexport default function TOC({\n  headings,\n  onPressEntry\n}: {\n  headings: Element[];\n  onPressEntry?: (name: string) => void;\n}) {\n  const [activeEntry, setActiveEntry] = useState(\n    headings.length ? textContent(headings[0]) : ''\n  );\n  return (\n    <ScrollView\n      contentContainerStyle={styles.scrollContent}\n      style={styles.scrollView}>\n      <View style={styles.scrollBackground} />\n      {headings.map((header) => {\n        const headerName = textContent(header);\n        const onPress = () => {\n          setActiveEntry(headerName);\n          onPressEntry?.(headerName);\n        };\n        return (\n          <TOCEntry\n            active={headerName === activeEntry}\n            key={headerName}\n            onPress={onPress}\n            tagName={header.tagName}\n            headerName={headerName}\n          />\n        );\n      })}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  scrollView: {\n    flex: 1,\n    backgroundColor: 'white',\n    opacity: 0.92,\n    paddingRight: 10\n  },\n  scrollContent: {\n    flex: 1,\n    paddingVertical: 20,\n    position: 'relative'\n  },\n  scrollBackground: {\n    ...StyleSheet.absoluteFillObject,\n    flex: 1,\n    borderRightWidth: 1,\n    marginRight: 10,\n    borderColor: 'rgba(125,125,125,0.3)'\n  }\n});\n")),(0,i.kt)("p",null,"Finally, we must render the ",(0,i.kt)("inlineCode",{parentName:"p"},"TOC")," component in the ",(0,i.kt)("inlineCode",{parentName:"p"},"ArticleScreen"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'{2,10-18} title="screens/ArticleScreen.tsx"',"{2,10-18}":!0,title:'"screens/ArticleScreen.tsx"'},'// other imports\nimport TOC from \'../components/TOC\';\n\n// ...\n\nexport default function ArticleScreen(props: ArticleScreenProps) {\n  useSetTitleEffect(props);\n  const { dom, headings } = useArticleDom(props.route.params.url);\n  const { drawerRef, openDrawer } = useDrawer();\n  const onPressEntry = useCallback((entry: string) => {\n    // We\'ll handle that later\n  }, []);\n  const renderToc = useCallback(\n    function renderToc() {\n      return <TOC headings={headings} onPressEntry={onPressEntry} />;\n    },\n    [headings]\n  );\n  return (\n    <DrawerLayout\n      drawerPosition="right"\n      drawerWidth={300}\n      renderNavigationView={renderToc}\n      ref={drawerRef}>\n      <ArticleBody dom={dom} />\n      <FAB\n        style={styles.fab}\n        color="#61dafb"\n        icon="format-list-bulleted-square"\n        onPress={openDrawer}\n      />\n    </DrawerLayout>\n  );\n}\n\n// styles\n')),(0,i.kt)("p",null,"Now, you should have a drawable TOC!"),(0,i.kt)(o.Z,{scale:.85,url:"/img/blog-article-side.png",mdxType:"Screenshot"}),(0,i.kt)("p",null,"However, pressing an entry won't do anything. ",(0,i.kt)("strong",{parentName:"p"},"It is hence time to tackle the\nimplementation of the tap-to-scroll feature! Let's jump to ",(0,i.kt)("a",{parentName:"strong",href:"/react-native-render-html/blog/2021/06/29/create-blog-app-rnrh-III"},"Part\nIII")),"."))}g.isMDXComponent=!0}}]);