(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8108],{5317:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var r=n(7560),i=n(8283),l=(n(2784),n(9037)),a=n(6785),o={id:"reinvent-the-wheel",title:"Reinvent the Wheel",sidebar_position:1,description:"How to implement a super simple HTML renderer in React Native?"},s={unversionedId:"reinvent-the-wheel",id:"reinvent-the-wheel",isDocsHomePage:!1,title:"Reinvent the Wheel",description:"How to implement a super simple HTML renderer in React Native?",source:"@site/docs/reinvent-the-wheel.mdx",sourceDirName:".",slug:"/reinvent-the-wheel",permalink:"/react-native-render-html/docs/reinvent-the-wheel",version:"current",sidebarPosition:1,frontMatter:{id:"reinvent-the-wheel",title:"Reinvent the Wheel",sidebar_position:1,description:"How to implement a super simple HTML renderer in React Native?"},sidebar:"docSidebar",previous:{title:"Architecture",permalink:"/react-native-render-html/docs/architecture"},next:{title:"Textual",permalink:"/react-native-render-html/docs/content/textual"}},p=[{value:"Implementation",id:"implementation",children:[]},{value:"Discussion",id:"discussion",children:[]}],d={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"To understand how this library works, we propose a teeny, tiny implementation of an HTML renderer in just about ",(0,l.kt)("strong",{parentName:"p"},"40 lines of code"),". Of course, it has many limitations that are overcomed by ",(0,l.kt)("inlineCode",{parentName:"p"},"react-native-render-html"),", but it will give you a good glimpse at how things work internally."),(0,l.kt)("h2",{id:"implementation"},"Implementation"),(0,l.kt)("p",null,"To do so, we will need an HTML parsing library which will give us some sort of proxy DOM representation of the HTML source. In this very example, we will use ","\u200b",(0,l.kt)(a.Z,{full:!1,name:"htmlparser2",url:"https://github.com/fb55/htmlparser2#readme",type:"library",mdxType:"Reference"})," libarary:"),(0,l.kt)("div",{className:"codeblock--with-line-numbers"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="RenderHtml.jsx"',title:'"RenderHtml.jsx"'},"import {Text, View} from 'react-native';\nimport {parseDocument, ElementType} from 'htmlparser2';\nimport React, {PureComponent} from 'react';\n\nexport default class RenderHtml extends PureComponent {\n  ignoredTags = ['head'];\n  textTags = ['span', 'strong', 'em'];\n\n  renderTextNode(textNode, index) {\n    return <Text key={index}>{textNode.data}</Text>;\n  }\n\n  renderElement(element, index) {\n    if (this.ignoredTags.indexOf(element.name) > -1) {\n      return null;\n    }\n    const Wrapper = this.textTags.indexOf(element.name) > -1 ? Text : View;\n    return (\n      <Wrapper key={index}>\n        {element.children.map((c, i) => this.renderNode(c, i))}\n      </Wrapper>\n    );\n  }\n\n  renderNode(node, index) {\n    switch (node.type) {\n      case ElementType.Text:\n        return this.renderTextNode(node, index);\n      case ElementType.Tag:\n        return this.renderElement(node, index);\n    }\n    return null;\n  }\n\n  render() {\n    const document = parseDocument(this.props.html);\n    return document.children.map((c, i) => this.renderNode(c, i));\n  }\n}\n"))),(0,l.kt)("p",null,"Below is an overview of the component","'","s ",(0,l.kt)("inlineCode",{parentName:"p"},"render")," method invocation:"),(0,l.kt)("ol",{style:{listStyleType:"decimal"}},(0,l.kt)("li",null,(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Line 36")," invokes ",(0,l.kt)("inlineCode",{parentName:"p"},"parseDocument")," from ","\u200b",(0,l.kt)(a.Z,{full:!1,name:"htmlparser2",url:"https://github.com/fb55/htmlparser2#readme",type:"library",mdxType:"Reference"})," which returns the root DOM node of the document.")),(0,l.kt)("li",null,(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Line 37")," returns the mapping of the root","'","s children with the result of ",(0,l.kt)("inlineCode",{parentName:"p"},"renderNode")," method.")),(0,l.kt)("li",null,(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Line 25"),", the ",(0,l.kt)("inlineCode",{parentName:"p"},"renderNode")," method returns: the result of ",(0,l.kt)("inlineCode",{parentName:"p"},"renderTextNode")," when provided with a DOM ",(0,l.kt)("inlineCode",{parentName:"p"},"Text")," node, the result of ",(0,l.kt)("inlineCode",{parentName:"p"},"renderElement")," when the provided node is an ",(0,l.kt)("inlineCode",{parentName:"p"},"Element"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," otherwise, such as when the provided node is a comment, script, or stylesheet."))),(0,l.kt)("p",null,"Although the ",(0,l.kt)("inlineCode",{parentName:"p"},"renderTextNode")," implementation is pretty straightforward,",(0,l.kt)("inlineCode",{parentName:"p"},"renderElement")," has some conditional logic to render the element either in a React Native ","\u200b",(0,l.kt)(a.Z,{full:!1,name:"Text",url:"https://reactnative.dev/docs/Text",type:"rn-symbol",mdxType:"Reference"})," or ","\u200b",(0,l.kt)(a.Z,{full:!1,name:"View",url:"https://reactnative.dev/docs/View",type:"rn-symbol",mdxType:"Reference"}),". This is to bypass rendering glitches when embedding ","\u200b",(0,l.kt)(a.Z,{full:!1,name:"View",url:"https://reactnative.dev/docs/View",type:"rn-symbol",mdxType:"Reference"})," inside ","\u200b",(0,l.kt)(a.Z,{full:!1,name:"Text",url:"https://reactnative.dev/docs/Text",type:"rn-symbol",mdxType:"Reference"}),", such as discussed in more details in the below section (hoisting)."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"We allude to the DOM an DOM nodes while ","\u200b",(0,l.kt)(a.Z,{full:!1,name:"htmlparser2",url:"https://github.com/fb55/htmlparser2#readme",type:"library",mdxType:"Reference"})," only provides a substet of the DOM API for lightweightness!\n"))),(0,l.kt)("h2",{id:"discussion"},"Discussion"),(0,l.kt)("p",null,"Perhaps your requirements are so simple that this might actually be sufficient for your use-case. You could try to extend this naive implementation with the below, easy to implement features:"),(0,l.kt)("ol",{style:{listStyleType:"decimal"}},(0,l.kt)("li",null,(0,l.kt)("p",null,"Add custom renderers for specific tags such as ","\u200b",(0,l.kt)(a.Z,{full:!1,name:"<img>",url:"https://mdn.io/img",type:"html-el",mdxType:"Reference"}),", ","\u200b",(0,l.kt)(a.Z,{full:!1,name:"<ul>",url:"https://mdn.io/ul",type:"html-el",mdxType:"Reference"}),"...")),(0,l.kt)("li",null,(0,l.kt)("p",null,"Add styles for specific tags and classes."))),(0,l.kt)("p",null,"However, you will get involved in a much substantial and complex task if you have requirements such as: "),(0,l.kt)("ol",{style:{listStyleType:"decimal"}},(0,l.kt)("li",null,(0,l.kt)("p",null,"Support ",(0,l.kt)("a",{parentName:"p",href:"https://html.spec.whatwg.org/#the-style-attribute"},"inline styles"),". You would need to transform those styles into React Native compatible styles. Beware that unsupported styles on the native side could easily crash your app.")),(0,l.kt)("li",null,(0,l.kt)("p",null,"Support ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/white-space"},"whitespace collapsing")," such as in ","\u200b",(0,l.kt)(a.Z,{full:!1,name:"white-space",url:"https://mdn.io/white-space",type:"css-prop",mdxType:"Reference"})," CSS property.")),(0,l.kt)("li",null,(0,l.kt)("p",null,"Support ",(0,l.kt)("a",{parentName:"p",href:"https://html.spec.whatwg.org/multipage/urls-and-fetching.html#resolving-urls"},"URL resolutions"),", such as relative URLs, ","\u200b",(0,l.kt)(a.Z,{full:!1,name:"<base>",url:"https://mdn.io/base",type:"html-el",mdxType:"Reference"})," elements... etc.")),(0,l.kt)("li",null,(0,l.kt)("p",null,"Support ","\u200b",(0,l.kt)(a.Z,{library:"react-native-render-html",name:"hoisting",url:"/react-native-render-html/docs/flow/transient-render-engine#hoisting",type:"doc",full:!1,mdxType:"Reference"}),". Because React Native ","\u200b",(0,l.kt)(a.Z,{full:!1,name:"View",url:"https://reactnative.dev/docs/View",type:"rn-symbol",mdxType:"Reference"})," elements are not well handled inside ","\u200b",(0,l.kt)(a.Z,{full:!1,name:"Text",url:"https://reactnative.dev/docs/Text",type:"rn-symbol",mdxType:"Reference"})," elements, these should be hoisted up in the tree to be rendered inside ",(0,l.kt)("inlineCode",{parentName:"p"},"Views"),".")),(0,l.kt)("li",null,(0,l.kt)("p",null,"Support complete ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/inheritance"},"CSS inheritance"),". For example, a ","\u200b",(0,l.kt)(a.Z,{full:!1,name:"<div>",url:"https://mdn.io/div",type:"html-el",mdxType:"Reference"})," element could have a style with text properties such as ","\u200b",(0,l.kt)(a.Z,{full:!1,name:"color",url:"https://mdn.io/color",type:"css-prop",mdxType:"Reference"}),", but a React Native ","\u200b",(0,l.kt)(a.Z,{full:!1,name:"View",url:"https://reactnative.dev/docs/View",type:"rn-symbol",mdxType:"Reference"})," element which is the default mapping for ","\u200b",(0,l.kt)(a.Z,{full:!1,name:"<div>",url:"https://mdn.io/div",type:"html-el",mdxType:"Reference"})," will not support such style property. See ","\u200b",(0,l.kt)(a.Z,{library:"react-native-render-html",name:"CSS Processing",url:"/react-native-render-html/docs/flow/css-processing",type:"doc",full:!1,mdxType:"Reference"})," page."))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"react-native-render-html")," overcomes all of those caveats and more out of the box!"))}m.isMDXComponent=!0}}]);