(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9921],{8924:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return m},metadata:function(){return c},toc:function(){return u},default:function(){return h}});var n=r(7560),a=r(8283),o=(r(2784),r(9037)),i=r(2123),p=r(1473),d=r(6785),s=["components"],l={id:"getnativepropsfortnode",title:"getNativePropsForTNode"},m=void 0,c={unversionedId:"getnativepropsfortnode",id:"getnativepropsfortnode",isDocsHomePage:!1,title:"getNativePropsForTNode",description:"Extract React Native props for a given &ZeroWidthSpace;, such as those which",source:"@site/api/getnativepropsfortnode.mdx",sourceDirName:".",slug:"/getnativepropsfortnode",permalink:"/react-native-render-html/api/getnativepropsfortnode",version:"current",frontMatter:{id:"getnativepropsfortnode",title:"getNativePropsForTNode"},sidebar:"apiSidebar",previous:{title:"domNodeToHTMLString",permalink:"/react-native-render-html/api/domnodetohtmlstring"},next:{title:"splitBoxModelStyle",permalink:"/react-native-render-html/api/splitboxmodelstyle"}},u=[{value:"Type Parameters",id:"type-parameters",children:[{value:"<code>T</code>",id:"t",children:[]}]},{value:"Parameters",id:"parameters",children:[{value:"<code>props</code>",id:"props",children:[]}]}],f={toc:u};function h(e){var t=e.components,r=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(p.Z,{reflectionId:1057,version:"6.3.0",mdxType:"HeaderTypeBox"}),(0,o.kt)("p",null,"Extract React Native props for a given ","\u200b",(0,o.kt)(d.Z,{name:"TNode",url:"/api/tnode",type:"api-def",mdxType:"Reference"}),", such as those which\nwould be passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"Text"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"GenericPressable")," by ",(0,o.kt)("inlineCode",{parentName:"p"},"TDefaultRenderer"),"."),(0,o.kt)("p",null,"This helper function is peculiarly useful when one wants a custom renderer\nwhich uses a different native component, for example ",(0,o.kt)("inlineCode",{parentName:"p"},"Animated.Text")," instead\nof default ",(0,o.kt)("inlineCode",{parentName:"p"},"Text"),"."),(0,o.kt)("h4",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport { Animated } from 'react-native';\nimport { CustomTextualRenderer, getNativePropsForTNode } from 'react-native-render-html';\n\nconst AnimatedSpanRenderer: CustomTextualRenderer = (props) => {\n  const nativeProps = getNativePropsForTNode(props);\n  // This is equivalent to a TDefaultRenderer which `Text` is replaced\n  // with Animated.Text\n  return <Animated.Text {...nativeProps} />;\n}\n")),(0,o.kt)("h2",{id:"type-parameters"},"Type Parameters"),(0,o.kt)("h3",{id:"t"},(0,o.kt)("inlineCode",{parentName:"h3"},"T")),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("h3",{id:"props"},(0,o.kt)("inlineCode",{parentName:"h3"},"props")),(0,o.kt)(i.Z,{reflection:"%7B%22id%22%3A1060%2C%22name%22%3A%22props%22%2C%22kind%22%3A32768%2C%22kindString%22%3A%22Parameter%22%2C%22flags%22%3A%7B%7D%2C%22type%22%3A%7B%22type%22%3A%22reference%22%2C%22id%22%3A1477%2C%22typeArguments%22%3A%5B%7B%22type%22%3A%22reference%22%2C%22name%22%3A%22T%22%7D%5D%2C%22name%22%3A%22TDefaultRendererProps%22%7D%7D",mdxType:"DeclarationBox"}))}h.isMDXComponent=!0}}]);